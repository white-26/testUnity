1：简单工厂（SimpleFactory）
简单工厂模式是将多个类的对象放到一个类里面去实例化，这就是简单的工厂模式

2：工厂方法(Factory Method)
工厂方法模式与简单工厂模式类似，但是在原有的基础上做了一些改进，原来的简单工厂，违背了一点点开放--封闭原则，如果要增加某个功能就需要更改工厂类，那就暴露了工厂类里面的类实例；而工厂方法模式将原有的工厂类改为了一个工厂接口，然后每一个功能都有一个实例化工厂类，并且继承工厂类接口。那些功能类的实例化都放到对应的实例化工厂类里面去实例化；简而言之，就是原有的工厂类变为接口，switch里面的实例化都变为继承了这个接口的工厂类

3：观察者模式(Observer)
观察者模式(又叫做发布-订阅模式）,打个比方，我们上课的时候打游戏，而我们就可以是一个观察者，定义为一个观察者类；老师或者放哨的同学就是发布者，定义为一个发布者类；当然，打游戏的不止一个，放哨的或者老师也不止一个，所以以上两个类必须声明为接口类；最后就是继承了两个类的具体观察者类跟具体发布者类之间的交互（通过实例化对象进行交互）；

4：单例模式(SIngleton)
保证一个类只有一个实例，斌提供一个访问它的全局访问点（也就是一个public方法）
#region 单例模式安全版本
    class Singleton {
        private static Singleton instance;
        private static readonly object syncRoot = new object();
        private Singleton() { }
        public static Singleton GetInstance() {
            //lock是确保当一个线程位于代码临界区时，另一个线程不允许进入临界区。
            //如果其他线程试图进入锁定的代码，则他将一直等待，知道该对象被释放
            lock (syncRoot)
            {
                if (instance == null)
                {
                    instance = new Singleton();
                }
            }
            return instance;
        }
    }
#endregion
5：代理模式(Delegate)
代理模式就是用一个类去执行另一个类的操作

6：策略模式(Strategy)
策略模式是一种定义一系列算法的方法，从概念上看，所有这些算法完成的都是相同的工作，只是实现不同，它可以以相同的方式调用所有的算法，减少了各种算法类与使用算法类之间的耦合；其实策略模式有一点点装饰者模式的味道，只是装饰者模式是将所有方法连成一线同时执行，策略模式就是将各个类里面的方法分开，单独运行；同样是将方法类很好的封装了起来；

7：适配器模式(Adapter)
适配器模式跟代理模式比较类似，也是将一个类里面的操作放到另一个类里面去执行；不同的是，所执行的方法操作是类似的；就拿中国球员跟外国球员来说，中国球员类里面有进攻和防守方法，外国球员也有进攻和防守方法，但是，因为语言不通，所以无法交流，这时候就会有一个翻译官（翻译者类）,他会跟中国球员类继承同一个接口；重写同样的方法，但是翻译者类里面会多一个外国球员的类，用来调用外国球员类里面的进攻和防守方法；这样就达到了适配的效果。

8：原型模式(Prototype)
原型模式就是类继承了系统接口（ICloneable）之后，调用接口中的MemberwiseClone()方法实现对对象的复制；需要注意的是神符之语浅复制，核心是 MemberwiseClone():创建当前对象的浅表副本。方法是创建一个新对象，然后将当前对象的非静态字段复制到该新对象。如果字段是值类型，则对该字段进行逐位复制。如果字段是引用类型，则复制引用，但不复制引用对象，因此原始对象及其副本引用同一对象；

9：模板模式(Template)
模板方法模式就是将主类里面的操作延迟到子类中进行

10：装饰者模式(Decorator)
装饰者模式就是将一系列的类操作联系起来，最后只调用一个方法就等于同时调用多个方法，最关键的地方就是，对象的设置（public void SetComponent(Component component)）跟调用父类的方法；两者配合，将多个类多个方法连接在了一起，成为了一个整体
11：建造器模式(Builder)
建造者模式表示一个建造者类通过他的派生类对一个或多个类进行操作，但是操作部分用一个指挥者类来代替，就相当于建筑行业里面的  老板(建造者类)-----包工头(老板的派生类)-------工人(指挥类，负责执行任务)

12：外观模式(Facade)
外观模式相当于定义一个类，这个类里面定义多个类对像，对着多个类里面的方法进行统一管理

13；抽象工厂(Factory)
